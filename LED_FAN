#include <WiFi.h>
#include <ESP32Servo.h>

// Replace with your network credentials
const char* ssid = "Mayuri";
const char* password = "mayuripame";

WiFiServer server(80);

String header; // To store HTTP request
String ledState = "off";  // State of the LED
String fanState = "off";  // State of the fan

const int ledPin = 26; // GPIO pin for LED
const int servoPin = 13; // GPIO pin for Fan Control Servo Motor

Servo fanServo; // Servo object for fan control

unsigned long currentTime = millis();
unsigned long previousTime = 0;
const long timeoutTime = 2000;

void setup() {
  Serial.begin(115200);

  // Initialize LED pin
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);

  // Initialize Servo Motor for Fan
  fanServo.attach(servoPin);
  fanServo.write(0); // Initial position (fan off)

  // Connect to Wi-Fi
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\nWiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  server.begin();
}

void loop() {
  WiFiClient client = server.available();
  if (client) {
    currentTime = millis();
    previousTime = currentTime;
    Serial.println("New Client.");
    String currentLine = "";

    while (client.connected() && currentTime - previousTime <= timeoutTime) {
      currentTime = millis();
      if (client.available()) {
        char c = client.read();
        Serial.write(c);
        header += c;

        if (c == '\n') {
          if (currentLine.length() == 0) {
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();

            // Handle LED toggle requests
            if (header.indexOf("GET /led/on") >= 0) {
              Serial.println("LED ON");
              ledState = "on";
              digitalWrite(ledPin, HIGH);
            } else if (header.indexOf("GET /led/off") >= 0) {
              Serial.println("LED OFF");
              ledState = "off";
              digitalWrite(ledPin, LOW);
            }

            // Handle Fan toggle requests
            if (header.indexOf("GET /fan/on") >= 0) {
              Serial.println("Turning Fan ON");
              fanState = "on";
              fanServo.write(90); // Rotate servo to 90 degrees to turn on the fan
            } else if (header.indexOf("GET /fan/off") >= 0) {
              Serial.println("Turning Fan OFF");
              fanState = "off";
              fanServo.write(0); // Rotate servo to 0 degrees to turn off the fan
            }

            // HTML Web Page
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<style>");
            client.println("html { font-family: Helvetica; text-align: center; }");
            client.println(".button { background-color: #4CAF50; color: white; padding: 16px 40px; font-size: 20px; border: none; cursor: pointer; }");
            client.println(".button2 { background-color: #f44336; color: white; padding: 16px 40px; font-size: 20px; border: none; cursor: pointer; }");
            client.println("</style></head>");
            client.println("<body><h1>ESP32 Home Controller</h1>");

            // LED Control
            client.println("<p>LED is " + ledState + "</p>");
            if (ledState == "off") {
              client.println("<p><a href=\"/led/on\"><button class=\"button\">Turn ON</button></a></p>");
            } else {
              client.println("<p><a href=\"/led/off\"><button class=\"button2\">Turn OFF</button></a></p>");
            }

            // Fan Control
            client.println("<p>Fan is " + fanState + "</p>");
            if (fanState == "off") {
              client.println("<p><a href=\"/fan/on\"><button class=\"button\">Turn ON</button></a></p>");
            } else {
              client.println("<p><a href=\"/fan/off\"><button class=\"button2\">Turn OFF</button></a></p>");
            }

            client.println("</body></html>");
            client.println();
            break;
          } else {
            currentLine = "";
          }
        } else if (c != '\r') {
          currentLine += c;
        }
      }
    }
    header = "";
    client.stop();
    Serial.println("Client disconnected.");
  }
}



